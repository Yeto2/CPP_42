#include <iostream>
#include <ctime>
#include "Account.hpp"

// Static member initialization
int Account::_nbAccounts = 0;
int Account::_totalAmount = 0;
int Account::_totalNbDeposits = 0;
int Account::_totalNbWithdrawals = 0;

// Constructor
Account::Account(int initial_deposit) 
    : _accountIndex(_nbAccounts), _amount(initial_deposit), _nbDeposits(0), _nbWithdrawals(0) {
    _nbAccounts++;
    _totalAmount += initial_deposit;
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";amount:" << _amount << ";created" << std::endl;
}

// Destructor
Account::~Account() {
    _nbAccounts--;
    _totalAmount -= _amount;
    _displayTimestamp();
    std::cout << "index:" << _accountIndex << ";amount:" << _amount << ";closed" << std::endl;
}

// Static functions
int Account::getNbAccounts() {
    return _nbAccounts;
}

int Account::getTotalAmount() {
    return _totalAmount;
}

int Account::getNbDeposits() {
    return _totalNbDeposits;
}

int Account::getNbWithdrawals() {
    return _totalNbWithdrawals;
}

void Account::displayAccountsInfos() {
    _displayTimestamp();
    std::cout << "accounts:" << _nbAccounts
              << ";total:" << _totalAmount
              << ";deposits:" << _totalNbDeposits
              << ";withdrawals:" << _totalNbWithdrawals << std::endl;
}

// Deposit function
void Account::makeDeposit(int deposit) {
    if (deposit > 0) {
        int p_amount = _amount; // previous amount
        _amount += deposit;
        _nbDeposits++;
        _totalNbDeposits++;
        _totalAmount += deposit;
        _displayTimestamp();
        std::cout << "index:" << _accountIndex 
                  << ";p_amount:" << p_amount 
                  << ";deposit:" << deposit 
                  << ";amount:" << _amount 
                  << ";nb_deposits:" << _nbDeposits << std::endl;
    }
}

// Withdrawal function
bool Account::makeWithdrawal(int withdrawal) {
    _displayTimestamp();
    if (withdrawal > 0 && withdrawal <= _amount) {
        int p_amount = _amount; // previous amount
        _amount -= withdrawal;
        _nbWithdrawals++;
        _totalNbWithdrawals++;
        _totalAmount -= withdrawal;
        std::cout << "index:" << _accountIndex 
                  << ";p_amount:" << p_amount 
                  << ";withdrawal:" << withdrawal 
                  << ";amount:" << _amount 
                  << ";nb_withdrawals:" << _nbWithdrawals << std::endl;
        return true;
    } else {
        std::cout << "index:" << _accountIndex 
                  << ";p_amount:" << _amount 
                  << ";withdrawal:refused" << std::endl;
        return false;
    }
}

// Check amount function
int Account::checkAmount() const {
    return _amount;
}

// Display status function
void Account::displayStatus() const {
    _displayTimestamp();
    std::cout << "index:" << _accountIndex 
              << ";amount:" << _amount 
              << ";deposits:" << _nbDeposits 
              << ";withdrawals:" << _nbWithdrawals << std::endl;
}

// Static function to display timestamp
void Account::_displayTimestamp() {
    time_t now = time(0);
    tm *ltm = localtime(&now);
    std::cout << "[" << 1900 + ltm->tm_year << "-" 
              << 1 + ltm->tm_mon << "-" 
              << ltm->tm_mday << " "
              << 1 + ltm->tm_hour << ":"
              << 1 + ltm->tm_min << ":"
              << 1 + ltm->tm_sec << "] ";
}